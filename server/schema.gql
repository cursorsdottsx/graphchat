# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type DirectMessage {
  content: String!
  createdAt: String!
  id: String!
  receiver: User!
  sender: User!
  updatedAt: String!
}

type DirectMessageResponse {
  errors: [QueryError!]
  message: DirectMessage
}

type DirectMessagesResponse {
  errors: [QueryError!]
  messages: [DirectMessage!]
}

type Mutation {
  acceptFriend(id: Float!): UserFriendResponse!
  addFriend(id: String!): UserFriendRequestResponse!
  ban(id: String!, length: Float, reason: String!): UserBanResponse!
  block(id: String!): UserBlockResponse!
  deleteDM(id: String!): DirectMessageResponse!
  deletePost(id: String!): PostResponse!
  deletePostComment(id: String!): PostCommentResponse!
  deleteUser(id: String!): UserResponse!
  editBan(case: Float!, data: UserBanEditInput!): UserBanResponse!
  editDM(content: String!, id: String!): DirectMessageResponse!
  editPost(data: UpdatePostInput!, id: String!): PostResponse!
  editPostComment(content: String!, id: String!): PostCommentResponse!
  fetchFriends: UserFriendsResponse!
  follow(id: String!): UserFollowResponse!
  ignoreFriend(id: Float!): UserFriendRequestResponse!
  login(input: UsernamePasswordInput!): UserResponse!
  logout: Boolean!
  post(content: String!, title: String!): PostResponse!
  postComment(content: String!, id: String!): PostCommentResponse!
  register(input: UsernamePasswordEmailInput!): UserResponse!
  removeFriend(id: String!): UserFriendResponse!
  sendDM(message: String!, receiver: String!): DirectMessageResponse!
  unban(id: String!): UserBansResponse!
  unblock(id: String!): UserBlocksResponse!
  unfollow(id: String!): UserFollowResponse!
  updateUser(data: UpdateUserInput!): UserResponse
}

type Post {
  author: User!
  content: String!
  id: String!
  likes: Int!
  slug: String!
  title: String!
}

type PostComment {
  author: User!
  content: String!
  id: String!
  likes: Int!
  parent: PostComment!
  post: Post!
}

type PostCommentResponse {
  comment: PostComment
  errors: [QueryError!]
}

type PostCommentsResponse {
  comments: [PostComment!]
  errors: [QueryError!]
}

type PostResponse {
  errors: [QueryError!]
  post: Post
}

type Query {
  fetchBans(id: String!): UserBansResponse!
  fetchBlocks(id: String!): UserBlocksResponse!
  fetchFollowed: UsersResponse!
  fetchFollowers: UsersResponse!
  getDMs(limit: Float, offset: Float, sender: String!): DirectMessagesResponse!
  getPost(id: String!): PostResponse
  getPostComment(id: String!): PostCommentResponse
  getPostComments(id: String!): PostCommentsResponse
  me: User
  user(id: String!): UserResponse!
}

type QueryError {
  message: String!
  status: Float!
}

input UpdatePostInput {
  content: String
  title: String
}

input UpdateUserInput {
  description: String
  displayName: String
  status: String
}

type User {
  avatar: String!
  createdAt: String!
  description: String!
  displayName: String!
  email: String!
  id: String!
  role: UserRole!
  status: String!
  updatedAt: String!
  username: String!
}

type UserBan {
  case: Int!
  createdAt: String!
  expires: DateTime!
  moderator: String!
  offender: String!
  reason: String!
}

input UserBanEditInput {
  expires: DateTime!
  reason: String!
}

type UserBanResponse {
  ban: UserBan
  errors: [QueryError!]
}

type UserBansResponse {
  bans: [UserBan!]
  errors: [QueryError!]
}

type UserBlock {
  blocked: User!
  id: Int!
  user: User!
}

type UserBlockResponse {
  block: UserBlock
  errors: [QueryError!]
}

type UserBlocksResponse {
  blocks: [UserBlock!]
  errors: [QueryError!]
}

type UserFollow {
  followed: User!
  id: Int!
  user: User!
}

type UserFollowResponse {
  errors: [QueryError!]
  follow: UserFollow
}

type UserFriend {
  friended: User!
  id: Int!
  user: User!
}

type UserFriendRequest {
  friend: User!
  id: Int!
  user: User!
}

type UserFriendRequestResponse {
  errors: [QueryError!]
  request: UserFriendRequest
}

type UserFriendResponse {
  errors: [QueryError!]
  friend: UserFriend
}

type UserFriendsResponse {
  errors: [QueryError!]
  friends: [UserFriend!]
}

type UserResponse {
  errors: [QueryError!]
  user: User
}

enum UserRole {
  ADMIN
  MODERATOR
  SYSADMIN
  USER
  VETERAN
}

input UsernamePasswordEmailInput {
  email: String!
  password: String!
  username: String!
}

input UsernamePasswordInput {
  password: String!
  username: String!
}

type UsersResponse {
  errors: [QueryError!]
  users: [User!]
}
