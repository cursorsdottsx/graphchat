# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type DirectMessage {
  content: String!
  createdAt: String!
  id: String!
  receiver: User!
  sender: User!
  updatedAt: String!
}

type DirectMessageResponse {
  errors: [QueryError!]
  message: DirectMessage
}

type DirectMessagesResponse {
  errors: [QueryError!]
  messages: [DirectMessage!]
}

type Mutation {
  ban(id: String!, length: Float, reason: String!): UserBanResponse!
  deleteDM(id: String!): DirectMessageResponse!
  deleteUser(id: String!): UserResponse!
  editBan(case: Float!, data: UserBanEditInput!): UserBanResponse!
  editDM(content: String!, id: String!): DirectMessageResponse!
  login(input: UsernamePasswordInput!): UserResponse!
  register(input: UsernamePasswordEmailInput!): UserResponse!
  sendDM(message: String!, receiver: String!): DirectMessageResponse!
  unban(id: String!): UserBansResponse!
  updateUser(data: UpdateUserInput!): UserResponse
}

type Query {
  fetchBans(id: String!): UserBansResponse!
  getDMs(sender: String!): DirectMessagesResponse!
  me: User
  user(id: String!): UserResponse!
}

type QueryError {
  message: String!
  status: Float!
}

input UpdateUserInput {
  description: String
  displayName: String
  status: String
}

type User {
  avatar: String!
  createdAt: String!
  description: String!
  displayName: String!
  email: String!
  id: String!
  role: UserRole!
  status: String!
  updatedAt: String!
  username: String!
}

type UserBan {
  case: Int!
  createdAt: String!
  expires: DateTime!
  moderator: String!
  moderatorId: String!
  offender: String!
  offenderId: String!
  reason: String!
}

input UserBanEditInput {
  expires: DateTime!
  reason: String!
}

type UserBanResponse {
  ban: UserBan
  errors: [QueryError!]
}

type UserBansResponse {
  bans: [UserBan!]
  errors: [QueryError!]
}

type UserResponse {
  errors: [QueryError!]
  user: User
}

enum UserRole {
  ADMIN
  MODERATOR
  SYSADMIN
  USER
  VETERAN
}

input UsernamePasswordEmailInput {
  email: String!
  password: String!
  username: String!
}

input UsernamePasswordInput {
  password: String!
  username: String!
}
